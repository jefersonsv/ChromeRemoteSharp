using System;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;

namespace ChromeRemoteSharp.InputDomain
{
    public partial class InputDomain
    {
        /// <summary>
        /// Dispatches a key event to the page.
        /// <see cref="https://chromedevtools.github.io/devtools-protocol/tot/Input#method-dispatchKeyEvent"/>
        /// </summary>
        /// <param name="type">Type of the key event.</param>
        /// <param name="modifiers">Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0).</param>
        /// <param name="timestamp">Time at which the event occurred.</param>
        /// <param name="text">Text as generated by processing a virtual key code with a keyboard layout. Not needed for for `keyUp` and `rawKeyDown` events (default: "")</param>
        /// <param name="unmodifiedText">Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: "").</param>
        /// <param name="keyIdentifier">Unique key identifier (e.g., 'U+0041') (default: "").</param>
        /// <param name="code">Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").</param>
        /// <param name="key">Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").</param>
        /// <param name="windowsVirtualKeyCode">Windows virtual key code (default: 0).</param>
        /// <param name="nativeVirtualKeyCode">Native virtual key code (default: 0).</param>
        /// <param name="autoRepeat">Whether the event was generated from auto repeat (default: false).</param>
        /// <param name="isKeypad">Whether the event was generated from the keypad (default: false).</param>
        /// <param name="isSystemKey">Whether the event was a system key event (default: false).</param>
        /// <param name="location">Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default: 0).</param>
        /// <returns></returns>
        public async Task<JObject> DispatchKeyEventAsync(string type, string modifiers = null, string timestamp = null, string text = null, string unmodifiedText = null, string keyIdentifier = null, string code = null, string key = null, string windowsVirtualKeyCode = null, string nativeVirtualKeyCode = null, bool? autoRepeat = null, bool? isKeypad = null, bool? isSystemKey = null, string location = null)
        {
            return await CommandAsync("dispatchKeyEvent", 
                 new KeyValuePair<string, object>("type", type), 
                 new KeyValuePair<string, object>("modifiers", modifiers), 
                 new KeyValuePair<string, object>("timestamp", timestamp), 
                 new KeyValuePair<string, object>("text", text), 
                 new KeyValuePair<string, object>("unmodifiedText", unmodifiedText), 
                 new KeyValuePair<string, object>("keyIdentifier", keyIdentifier), 
                 new KeyValuePair<string, object>("code", code), 
                 new KeyValuePair<string, object>("key", key), 
                 new KeyValuePair<string, object>("windowsVirtualKeyCode", windowsVirtualKeyCode), 
                 new KeyValuePair<string, object>("nativeVirtualKeyCode", nativeVirtualKeyCode), 
                 new KeyValuePair<string, object>("autoRepeat", autoRepeat), 
                 new KeyValuePair<string, object>("isKeypad", isKeypad), 
                 new KeyValuePair<string, object>("isSystemKey", isSystemKey), 
                 new KeyValuePair<string, object>("location", location)
                 );
        }
    }
}
